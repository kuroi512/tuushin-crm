// Prisma Schema for ТУУШИН ХХК Freight CRM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Business relations
  customersCreated     Customer[]              @relation("CustomerCreatedBy")
  customersUpdated     Customer[]              @relation("CustomerUpdatedBy")
  quotationsCreated    Quotation[]             @relation("QuotationCreatedBy")
  quotationsUpdated    Quotation[]             @relation("QuotationUpdatedBy")
  quotationsAssigned   Quotation[]             @relation("QuotationAssignedTo")
  auditLogs            AuditLog[]
  quotationRuleSnippetsCreated QuotationRuleSnippet[] @relation("QuotationRuleSnippetCreatedBy")
  quotationRuleSnippetsUpdated QuotationRuleSnippet[] @relation("QuotationRuleSnippetUpdatedBy")
  quotationRuleDefaultsUpdated QuotationRuleDefault[] @relation("QuotationRuleDefaultUpdatedBy")
  salesTasksCreated            AppSalesTask[]          @relation("AppSalesTaskCreatedBy")
  salesTasksAssigned           AppSalesTask[]          @relation("AppSalesTaskSalesManager")
  salesTaskStatusLogs          AppSalesTaskStatusLog[] @relation("AppSalesTaskStatusLogActor")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  SALES
}

// ============================================================================
// LOCATION & REFERENCE DATA
// ============================================================================

model Port {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  portType  PortType @default(SEA)

  quotationsOrigin      Quotation[] @relation("OriginPort")
  quotationsDestination Quotation[] @relation("DestinationPort")

  @@map("ports")
}

enum PortType {
  SEA
  AIR
  LAND
  RAIL
}

model Currency {
  id     String @id @default(cuid())
  name   String
  code   String @unique
  symbol String

  quotations Quotation[]

  @@map("currencies")
}

// ============================================================================
// CUSTOMER MANAGEMENT
// ============================================================================

model Customer {
  id                 String             @id @default(cuid())
  companyName        String
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  customerType       CustomerType
  sourceSystem       String?
  status             CustomerStatus     @default(ACTIVE)
  languagePreference LanguagePreference @default(EN)
  createdBy          String
  updatedBy          String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  createdByUser  User       @relation("CustomerCreatedBy", fields: [createdBy], references: [id])
  updatedByUser  User       @relation("CustomerUpdatedBy", fields: [updatedBy], references: [id])
  quotations     Quotation[]

  @@map("customers")
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
}

enum LanguagePreference {
  EN
  MN
  RU
}

// ============================================================================
// QUOTATION MANAGEMENT
// ============================================================================

model Quotation {
  id               String              @id @default(cuid())
  referenceNumber  String              @unique
  customerId       String
  userId           String
  updatedBy        String?
  assignedTo       String?

  // Cargo details
  cargoType        CargoType
  cargoDescription String?             @db.Text
  weight           Float?
  weightUnit       WeightUnit          @default(KG)
  volume           Float?
  volumeUnit       VolumeUnit          @default(M3)
  packageCount     Int?
  packageType      String?

  // Route details
  originPortId      String?
  destinationPortId String?
  pickupAddress     String?            @db.Text
  deliveryAddress   String?            @db.Text

  // Commercial details
  incoterm     String?
  currencyId   String
  exchangeRate Float               @default(1.0)
  totalAmount  Float
  profitMargin Float?

  // Status and validity
  status      QuotationStatus    @default(DRAFT)
  language    LanguagePreference @default(EN)
  validUntil  DateTime?
  sentAt      DateTime?
  confirmedAt DateTime?

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customer        Customer @relation(fields: [customerId], references: [id])
  user            User     @relation("QuotationCreatedBy", fields: [userId], references: [id])
  updatedByUser   User?    @relation("QuotationUpdatedBy", fields: [updatedBy], references: [id])
  assignedUser    User?    @relation("QuotationAssignedTo", fields: [assignedTo], references: [id])
  originPort      Port?    @relation("OriginPort", fields: [originPortId], references: [id])
  destinationPort Port?    @relation("DestinationPort", fields: [destinationPortId], references: [id])
  currency        Currency @relation(fields: [currencyId], references: [id])
  offers          QuotationOffer[]

  @@map("quotations")
}

enum CargoType {
  LCL
  FTL
  FCL
  AIR
  TRUCK
  RORO
  TANK
  TRAIN
  OPEN_TOP
  BULK
  REEFER
}

enum WeightUnit {
  KG
  TONS
}

enum VolumeUnit {
  M3
  FT3
}

enum QuotationStatus {
  DRAFT
  SENT
  CONFIRMED
  EXPIRED
  CANCELLED
}

model QuotationOffer {
  id               String   @id @default(cuid())
  quotationId      String
  title            String?
  order            Int      @default(0)
  offerNumber      String?
  
  // Transport & Route details
  transportMode    String?
  routeSummary     String?
  borderPort       String?
  
  // Commercial terms
  incoterm         String?
  shipper          String?
  terminal         String?
  
  // Shipment details
  shipmentCondition String?
  transitTime      String?
  rate             Float?
  rateCurrency     String?
  grossWeight      Float?
  dimensionsCbm    Float?
  
  // Extended data stored as JSON
  dimensions       Json?
  carrierRates     Json?
  extraServices    Json?
  customerRates    Json?
  profit           Json?
  
  // Notes
  notes            String?  @db.Text
  include          String?  @db.Text
  exclude          String?  @db.Text
  remark           String?  @db.Text
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  quotation Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@index([quotationId, order])
  @@map("quotation_offers")
}

// ============================================================================
// EXTERNAL SHIPMENT SYNCS
// ============================================================================

enum ExternalShipmentCategory {
  IMPORT
  TRANSIT
  EXPORT
}

model ExternalShipment {
  id               String                   @id @default(cuid())
  externalId       String
  category         ExternalShipmentCategory
  filterType       Int?
  syncLogId        String?
  number           Int?
  containerNumber  String?
  customerName     String?
  registeredAt     DateTime?
  arrivalAt        DateTime?
  transitEntryAt   DateTime?
  currencyCode     String?
  totalAmount      Float?
  profitMnt        Float?
  profitCurrency   Float?
  paymentType      String?
  salesManager     String?
  manager          String?
  note             String?
  extraServices    Json?
  otherServices    Json?
  raw              Json?
  syncedAt         DateTime                 @default(now())
  syncLog          ExternalShipmentSyncLog? @relation("SyncLogShipments", fields: [syncLogId], references: [id])

  @@unique([externalId, category])
  @@map("external_shipments")
}

model ExternalShipmentSyncLog {
  id             String                   @id @default(cuid())
  category       ExternalShipmentCategory
  filterType     Int?
  fromDate       DateTime?
  toDate         DateTime?
  recordCount    Int                      @default(0)
  totalAmount    Float?                   @default(0)
  totalProfitMnt Float?                   @default(0)
  totalProfitCur Float?                   @default(0)
  startedAt      DateTime                 @default(now())
  finishedAt     DateTime?
  status         SyncStatus               @default(SUCCESS)
  message        String?
  shipments      ExternalShipment[]        @relation("SyncLogShipments")

  @@map("external_shipment_sync_logs")
}

enum SyncStatus {
  SUCCESS
  PARTIAL
  FAILED
}

// ============================================================================
// COMPANY PROFILE & BRANDING
// ============================================================================

model CompanyProfile {
  id                 String    @id @default(cuid())
  legalName          String?
  registrationNumber String?
  vatNumber          String?
  phone              String?
  email              String?
  website            String?
  logoUrl            String?
  primaryColor       String?
  secondaryColor     String?
  defaultLocale      String   @default("en")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  translations CompanyProfileTranslation[]

  @@map("company_profiles")
}

model CompanyProfileTranslation {
  id               String         @id @default(cuid())
  companyProfileId String
  locale           String
  displayName      String
  address          String?
  tagline          String?
  description      String?
  mission          String?
  vision           String?
  additionalInfo   Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  company CompanyProfile @relation(fields: [companyProfileId], references: [id], onDelete: Cascade)

  @@unique([companyProfileId, locale])
  @@map("company_profile_translations")
}

// ============================================================================
// MASTER DATA SYNC STORAGE (External CRM options)
// ============================================================================

model MasterOption {
  id         String         @id @default(cuid())
  category   MasterCategory
  name       String
  externalId String?        @unique
  source     MasterSource   @default(EXTERNAL)
  code       String?
  meta       Json?
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([category])
  @@index([category, name])
  @@map("master_options")
}

enum MasterCategory {
  TYPE
  OWNERSHIP
  CUSTOMER
  AGENT
  COUNTRY
  PORT
  AREA
  EXCHANGE
  SALES
  MANAGER
}

enum MasterSource {
  EXTERNAL
  INTERNAL
}

// ============================================================================
// QUOTATION RULE ENGINE
// ============================================================================

enum QuotationRuleType {
  INCLUDE
  EXCLUDE
  REMARK
}

model QuotationRuleSnippet {
  id            String             @id @default(cuid())
  label         String
  type          QuotationRuleType
  incoterm      String?
  transportMode String?
  content       String             @db.Text
  contentTranslations Json?
  isDefault     Boolean            @default(false)
  order         Int                @default(0)
  isActive      Boolean            @default(true)
  createdById   String?
  updatedById   String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  createdBy User? @relation("QuotationRuleSnippetCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("QuotationRuleSnippetUpdatedBy", fields: [updatedById], references: [id])

  @@index([type])
  @@index([incoterm])
  @@index([transportMode])
  @@index([incoterm, transportMode, type])
  @@map("quotation_rule_snippets")
}

model QuotationRuleDefault {
  id            String             @id @default(cuid())
  incoterm      String?
  transportMode String?
  type          QuotationRuleType
  snippetIds    Json
  order         Int                @default(0)
  updatedById   String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  updatedBy User? @relation("QuotationRuleDefaultUpdatedBy", fields: [updatedById], references: [id])

  @@unique([incoterm, transportMode, type])
  @@index([type])
  @@index([incoterm])
  @@index([transportMode])
  @@map("quotation_rule_defaults")
}

// ============================================================================
// APP QUOTATIONS (Lightweight persistence for current UI)
// ============================================================================

model AppQuotation {
  id              String   @id @default(cuid())
  quotationNumber String   @unique
  client          String
  origin          String
  destination     String
  cargoType       String
  estimatedCost   Float
  status          String   @default("CREATED")
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  payload         Json?

  @@map("app_quotations")
}

// ============================================================================
// SALES TASKS (Meeting reports & follow-ups)
// ============================================================================

enum AppSalesTaskStatus {
  MEET
  CONTACT_BY_PHONE
  MEETING_DATE
  GIVE_INFO
  CONTRACT
}

model AppSalesTask {
  id                 String             @id @default(cuid())
  title              String?
  meetingDate        DateTime?
  clientName         String
  salesManagerId     String?
  salesManagerName   String?
  originCountry      String?
  destinationCountry String?
  commodity          String?
  mainComment        String?
  status             AppSalesTaskStatus @default(MEET)
  progress           Json?
  payload            Json?
  createdById        String?
  createdByName      String?
  createdByEmail     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  salesManager User? @relation("AppSalesTaskSalesManager", fields: [salesManagerId], references: [id])
  createdBy   User?  @relation("AppSalesTaskCreatedBy", fields: [createdById], references: [id])
  statusLogs  AppSalesTaskStatusLog[]

  @@index([status])
  @@index([salesManagerId])
  @@index([createdById])
  @@map("app_sales_tasks")
}

model AppSalesTaskStatusLog {
  id             String             @id @default(cuid())
  taskId         String
  status         AppSalesTaskStatus
  completed      Boolean            @default(true)
  comment        String?
  createdById    String?
  createdByName  String?
  createdByEmail String?
  createdAt      DateTime           @default(now())

  task      AppSalesTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy User?         @relation("AppSalesTaskStatusLogActor", fields: [createdById], references: [id])

  @@index([taskId])
  @@index([createdAt])
  @@map("app_sales_task_status_logs")
}

// ============================================================================
// AUDIT LOGS
// ============================================================================

model AuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String?
  userEmail  String?
  action     String
  resource   String?
  resourceId String?
  ip         String?
  userAgent  String?
  metadata   Json?

  user User? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([action])
  @@index([resource, resourceId])
  @@map("audit_logs")
}
